// Code generated by MockGen. DO NOT EDIT.
// Source: database/database.go

// Package database is a generated GoMock package.
package database

import (
	schema "example/movieSuggestion/schema"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddMovie mocks base method.
func (m *MockDatabase) AddMovie(arg0 *schema.Movie) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMovie", arg0)
}

// AddMovie indicates an expected call of AddMovie.
func (mr *MockDatabaseMockRecorder) AddMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovie", reflect.TypeOf((*MockDatabase)(nil).AddMovie), arg0)
}

// AddMovieToWatchlist mocks base method.
func (m *MockDatabase) AddMovieToWatchlist(arg0, arg1 uint64) schema.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieToWatchlist", arg0, arg1)
	ret0, _ := ret[0].(schema.Movie)
	return ret0
}

// AddMovieToWatchlist indicates an expected call of AddMovieToWatchlist.
func (mr *MockDatabaseMockRecorder) AddMovieToWatchlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieToWatchlist", reflect.TypeOf((*MockDatabase)(nil).AddMovieToWatchlist), arg0, arg1)
}

// CreateLike mocks base method.
func (m *MockDatabase) CreateLike(arg0, arg1 uint64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockDatabaseMockRecorder) CreateLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockDatabase)(nil).CreateLike), arg0, arg1)
}

// CreateReview mocks base method.
func (m *MockDatabase) CreateReview(arg0 *schema.Review) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateReview", arg0)
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockDatabaseMockRecorder) CreateReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockDatabase)(nil).CreateReview), arg0)
}

// CreateUser mocks base method.
func (m *MockDatabase) CreateUser(arg0 *schema.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUser", arg0)
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDatabaseMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabase)(nil).CreateUser), arg0)
}

// DeleteLike mocks base method.
func (m *MockDatabase) DeleteLike(arg0, arg1 uint64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockDatabaseMockRecorder) DeleteLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockDatabase)(nil).DeleteLike), arg0, arg1)
}

// DeleteMovie mocks base method.
func (m *MockDatabase) DeleteMovie(arg0 uint64) schema.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", arg0)
	ret0, _ := ret[0].(schema.Movie)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockDatabaseMockRecorder) DeleteMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockDatabase)(nil).DeleteMovie), arg0)
}

// DeleteMovieFromWatchlist mocks base method.
func (m *MockDatabase) DeleteMovieFromWatchlist(arg0, arg1 uint64) schema.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieFromWatchlist", arg0, arg1)
	ret0, _ := ret[0].(schema.Movie)
	return ret0
}

// DeleteMovieFromWatchlist indicates an expected call of DeleteMovieFromWatchlist.
func (mr *MockDatabaseMockRecorder) DeleteMovieFromWatchlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieFromWatchlist", reflect.TypeOf((*MockDatabase)(nil).DeleteMovieFromWatchlist), arg0, arg1)
}

// GetAllMovies mocks base method.
func (m *MockDatabase) GetAllMovies() []schema.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMovies")
	ret0, _ := ret[0].([]schema.Movie)
	return ret0
}

// GetAllMovies indicates an expected call of GetAllMovies.
func (mr *MockDatabaseMockRecorder) GetAllMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMovies", reflect.TypeOf((*MockDatabase)(nil).GetAllMovies))
}

// GetAllWatchlistMovies mocks base method.
func (m *MockDatabase) GetAllWatchlistMovies(arg0 uint64) []schema.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWatchlistMovies", arg0)
	ret0, _ := ret[0].([]schema.Movie)
	return ret0
}

// GetAllWatchlistMovies indicates an expected call of GetAllWatchlistMovies.
func (mr *MockDatabaseMockRecorder) GetAllWatchlistMovies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWatchlistMovies", reflect.TypeOf((*MockDatabase)(nil).GetAllWatchlistMovies), arg0)
}

// GetMovieByCategory mocks base method.
func (m *MockDatabase) GetMovieByCategory(arg0 string) []schema.Movie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByCategory", arg0)
	ret0, _ := ret[0].([]schema.Movie)
	return ret0
}

// GetMovieByCategory indicates an expected call of GetMovieByCategory.
func (mr *MockDatabaseMockRecorder) GetMovieByCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByCategory", reflect.TypeOf((*MockDatabase)(nil).GetMovieByCategory), arg0)
}

// UpdateReview mocks base method.
func (m *MockDatabase) UpdateReview(arg0 uint64, arg1 schema.Review) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateReview", arg0, arg1)
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockDatabaseMockRecorder) UpdateReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockDatabase)(nil).UpdateReview), arg0, arg1)
}
