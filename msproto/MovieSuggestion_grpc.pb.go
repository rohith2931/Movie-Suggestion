// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: msproto/MovieSuggestion.proto

package movieSuggestion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieSuggestionServiceClient is the client API for MovieSuggestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieSuggestionServiceClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetAllMovies(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (MovieSuggestionService_GetAllMoviesClient, error)
	// rpc GetMovieByCategory(MovieCategory) returns (Movies){}
	AddMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movie, error)
	DeleteMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*DeleteMovieResponse, error)
	AddMovieToWatchlist(ctx context.Context, in *AddMovieToWatchlistRequest, opts ...grpc.CallOption) (*AddMovieToWatchlistResponse, error)
	GetAllWatchlistMovies(ctx context.Context, in *GetAllWatchlistMoviesRequest, opts ...grpc.CallOption) (MovieSuggestionService_GetAllWatchlistMoviesClient, error)
	DeleteMovieFromWatchlist(ctx context.Context, in *DeleteMovieFromWatchlistRequest, opts ...grpc.CallOption) (*DeleteMovieFromWatchlistResponse, error)
	CreateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Review, error)
	UpdateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Review, error)
	DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error)
	CreateLike(ctx context.Context, in *UserLikeRequest, opts ...grpc.CallOption) (*UserLikeResponse, error)
	DeleteLike(ctx context.Context, in *UserLikeRequest, opts ...grpc.CallOption) (*UserLikeResponse, error)
}

type movieSuggestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieSuggestionServiceClient(cc grpc.ClientConnInterface) MovieSuggestionServiceClient {
	return &movieSuggestionServiceClient{cc}
}

func (c *movieSuggestionServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionServiceClient) GetAllMovies(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (MovieSuggestionService_GetAllMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieSuggestionService_ServiceDesc.Streams[0], "/msproto.MovieSuggestionService/GetAllMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieSuggestionServiceGetAllMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieSuggestionService_GetAllMoviesClient interface {
	Recv() (*Movie, error)
	grpc.ClientStream
}

type movieSuggestionServiceGetAllMoviesClient struct {
	grpc.ClientStream
}

func (x *movieSuggestionServiceGetAllMoviesClient) Recv() (*Movie, error) {
	m := new(Movie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieSuggestionServiceClient) AddMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/AddMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionServiceClient) DeleteMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*DeleteMovieResponse, error) {
	out := new(DeleteMovieResponse)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionServiceClient) AddMovieToWatchlist(ctx context.Context, in *AddMovieToWatchlistRequest, opts ...grpc.CallOption) (*AddMovieToWatchlistResponse, error) {
	out := new(AddMovieToWatchlistResponse)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/AddMovieToWatchlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionServiceClient) GetAllWatchlistMovies(ctx context.Context, in *GetAllWatchlistMoviesRequest, opts ...grpc.CallOption) (MovieSuggestionService_GetAllWatchlistMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieSuggestionService_ServiceDesc.Streams[1], "/msproto.MovieSuggestionService/GetAllWatchlistMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieSuggestionServiceGetAllWatchlistMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieSuggestionService_GetAllWatchlistMoviesClient interface {
	Recv() (*Movie, error)
	grpc.ClientStream
}

type movieSuggestionServiceGetAllWatchlistMoviesClient struct {
	grpc.ClientStream
}

func (x *movieSuggestionServiceGetAllWatchlistMoviesClient) Recv() (*Movie, error) {
	m := new(Movie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieSuggestionServiceClient) DeleteMovieFromWatchlist(ctx context.Context, in *DeleteMovieFromWatchlistRequest, opts ...grpc.CallOption) (*DeleteMovieFromWatchlistResponse, error) {
	out := new(DeleteMovieFromWatchlistResponse)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/DeleteMovieFromWatchlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionServiceClient) CreateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionServiceClient) UpdateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionServiceClient) DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error) {
	out := new(DeleteReviewResponse)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionServiceClient) CreateLike(ctx context.Context, in *UserLikeRequest, opts ...grpc.CallOption) (*UserLikeResponse, error) {
	out := new(UserLikeResponse)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/CreateLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieSuggestionServiceClient) DeleteLike(ctx context.Context, in *UserLikeRequest, opts ...grpc.CallOption) (*UserLikeResponse, error) {
	out := new(UserLikeResponse)
	err := c.cc.Invoke(ctx, "/msproto.MovieSuggestionService/DeleteLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieSuggestionServiceServer is the server API for MovieSuggestionService service.
// All implementations must embed UnimplementedMovieSuggestionServiceServer
// for forward compatibility
type MovieSuggestionServiceServer interface {
	CreateUser(context.Context, *User) (*User, error)
	GetAllMovies(*MovieRequest, MovieSuggestionService_GetAllMoviesServer) error
	// rpc GetMovieByCategory(MovieCategory) returns (Movies){}
	AddMovie(context.Context, *Movie) (*Movie, error)
	DeleteMovie(context.Context, *Movie) (*DeleteMovieResponse, error)
	AddMovieToWatchlist(context.Context, *AddMovieToWatchlistRequest) (*AddMovieToWatchlistResponse, error)
	GetAllWatchlistMovies(*GetAllWatchlistMoviesRequest, MovieSuggestionService_GetAllWatchlistMoviesServer) error
	DeleteMovieFromWatchlist(context.Context, *DeleteMovieFromWatchlistRequest) (*DeleteMovieFromWatchlistResponse, error)
	CreateReview(context.Context, *Review) (*Review, error)
	UpdateReview(context.Context, *Review) (*Review, error)
	DeleteReview(context.Context, *DeleteReviewRequest) (*DeleteReviewResponse, error)
	CreateLike(context.Context, *UserLikeRequest) (*UserLikeResponse, error)
	DeleteLike(context.Context, *UserLikeRequest) (*UserLikeResponse, error)
	mustEmbedUnimplementedMovieSuggestionServiceServer()
}

// UnimplementedMovieSuggestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieSuggestionServiceServer struct {
}

func (UnimplementedMovieSuggestionServiceServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) GetAllMovies(*MovieRequest, MovieSuggestionService_GetAllMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllMovies not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) AddMovie(context.Context, *Movie) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovie not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) DeleteMovie(context.Context, *Movie) (*DeleteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) AddMovieToWatchlist(context.Context, *AddMovieToWatchlistRequest) (*AddMovieToWatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovieToWatchlist not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) GetAllWatchlistMovies(*GetAllWatchlistMoviesRequest, MovieSuggestionService_GetAllWatchlistMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllWatchlistMovies not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) DeleteMovieFromWatchlist(context.Context, *DeleteMovieFromWatchlistRequest) (*DeleteMovieFromWatchlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovieFromWatchlist not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) CreateReview(context.Context, *Review) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) UpdateReview(context.Context, *Review) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) DeleteReview(context.Context, *DeleteReviewRequest) (*DeleteReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) CreateLike(context.Context, *UserLikeRequest) (*UserLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) DeleteLike(context.Context, *UserLikeRequest) (*UserLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedMovieSuggestionServiceServer) mustEmbedUnimplementedMovieSuggestionServiceServer() {
}

// UnsafeMovieSuggestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieSuggestionServiceServer will
// result in compilation errors.
type UnsafeMovieSuggestionServiceServer interface {
	mustEmbedUnimplementedMovieSuggestionServiceServer()
}

func RegisterMovieSuggestionServiceServer(s grpc.ServiceRegistrar, srv MovieSuggestionServiceServer) {
	s.RegisterService(&MovieSuggestionService_ServiceDesc, srv)
}

func _MovieSuggestionService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionService_GetAllMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MovieRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieSuggestionServiceServer).GetAllMovies(m, &movieSuggestionServiceGetAllMoviesServer{stream})
}

type MovieSuggestionService_GetAllMoviesServer interface {
	Send(*Movie) error
	grpc.ServerStream
}

type movieSuggestionServiceGetAllMoviesServer struct {
	grpc.ServerStream
}

func (x *movieSuggestionServiceGetAllMoviesServer) Send(m *Movie) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieSuggestionService_AddMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Movie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).AddMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/AddMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).AddMovie(ctx, req.(*Movie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Movie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).DeleteMovie(ctx, req.(*Movie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionService_AddMovieToWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieToWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).AddMovieToWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/AddMovieToWatchlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).AddMovieToWatchlist(ctx, req.(*AddMovieToWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionService_GetAllWatchlistMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllWatchlistMoviesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieSuggestionServiceServer).GetAllWatchlistMovies(m, &movieSuggestionServiceGetAllWatchlistMoviesServer{stream})
}

type MovieSuggestionService_GetAllWatchlistMoviesServer interface {
	Send(*Movie) error
	grpc.ServerStream
}

type movieSuggestionServiceGetAllWatchlistMoviesServer struct {
	grpc.ServerStream
}

func (x *movieSuggestionServiceGetAllWatchlistMoviesServer) Send(m *Movie) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieSuggestionService_DeleteMovieFromWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieFromWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).DeleteMovieFromWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/DeleteMovieFromWatchlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).DeleteMovieFromWatchlist(ctx, req.(*DeleteMovieFromWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Review)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).CreateReview(ctx, req.(*Review))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Review)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).UpdateReview(ctx, req.(*Review))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionService_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).DeleteReview(ctx, req.(*DeleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionService_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/CreateLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).CreateLike(ctx, req.(*UserLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieSuggestionService_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieSuggestionServiceServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MovieSuggestionService/DeleteLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieSuggestionServiceServer).DeleteLike(ctx, req.(*UserLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieSuggestionService_ServiceDesc is the grpc.ServiceDesc for MovieSuggestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieSuggestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msproto.MovieSuggestionService",
	HandlerType: (*MovieSuggestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _MovieSuggestionService_CreateUser_Handler,
		},
		{
			MethodName: "AddMovie",
			Handler:    _MovieSuggestionService_AddMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieSuggestionService_DeleteMovie_Handler,
		},
		{
			MethodName: "AddMovieToWatchlist",
			Handler:    _MovieSuggestionService_AddMovieToWatchlist_Handler,
		},
		{
			MethodName: "DeleteMovieFromWatchlist",
			Handler:    _MovieSuggestionService_DeleteMovieFromWatchlist_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _MovieSuggestionService_CreateReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _MovieSuggestionService_UpdateReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _MovieSuggestionService_DeleteReview_Handler,
		},
		{
			MethodName: "CreateLike",
			Handler:    _MovieSuggestionService_CreateLike_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _MovieSuggestionService_DeleteLike_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllMovies",
			Handler:       _MovieSuggestionService_GetAllMovies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllWatchlistMovies",
			Handler:       _MovieSuggestionService_GetAllWatchlistMovies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "msproto/MovieSuggestion.proto",
}
