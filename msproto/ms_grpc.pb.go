// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: msproto/ms.proto

package movieSuggestion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsDatabaseClient is the client API for MsDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsDatabaseClient interface {
	CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error)
	GetAllMovies(ctx context.Context, in *EmptyMovie, opts ...grpc.CallOption) (MsDatabase_GetAllMoviesClient, error)
	GetMovieByCategory(ctx context.Context, in *MovieCategory, opts ...grpc.CallOption) (*Movies, error)
	AddMovie(ctx context.Context, in *NewMovie, opts ...grpc.CallOption) (*Movie, error)
	DeleteMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movie, error)
	AddMovieToWatchlist(ctx context.Context, in *AddMovieByUser, opts ...grpc.CallOption) (*Movie, error)
	GetAllWatchlistMovies(ctx context.Context, in *EmptyMovie, opts ...grpc.CallOption) (*Movies, error)
	DeleteMovieFromWatchlist(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movie, error)
	CreateReview(ctx context.Context, in *NewReview, opts ...grpc.CallOption) (*Review, error)
	UpdateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Review, error)
}

type msDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewMsDatabaseClient(cc grpc.ClientConnInterface) MsDatabaseClient {
	return &msDatabaseClient{cc}
}

func (c *msDatabaseClient) CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/msproto.MsDatabase/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msDatabaseClient) GetAllMovies(ctx context.Context, in *EmptyMovie, opts ...grpc.CallOption) (MsDatabase_GetAllMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MsDatabase_ServiceDesc.Streams[0], "/msproto.MsDatabase/GetAllMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &msDatabaseGetAllMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MsDatabase_GetAllMoviesClient interface {
	Recv() (*Movie, error)
	grpc.ClientStream
}

type msDatabaseGetAllMoviesClient struct {
	grpc.ClientStream
}

func (x *msDatabaseGetAllMoviesClient) Recv() (*Movie, error) {
	m := new(Movie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *msDatabaseClient) GetMovieByCategory(ctx context.Context, in *MovieCategory, opts ...grpc.CallOption) (*Movies, error) {
	out := new(Movies)
	err := c.cc.Invoke(ctx, "/msproto.MsDatabase/GetMovieByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msDatabaseClient) AddMovie(ctx context.Context, in *NewMovie, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/msproto.MsDatabase/AddMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msDatabaseClient) DeleteMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/msproto.MsDatabase/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msDatabaseClient) AddMovieToWatchlist(ctx context.Context, in *AddMovieByUser, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/msproto.MsDatabase/AddMovieToWatchlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msDatabaseClient) GetAllWatchlistMovies(ctx context.Context, in *EmptyMovie, opts ...grpc.CallOption) (*Movies, error) {
	out := new(Movies)
	err := c.cc.Invoke(ctx, "/msproto.MsDatabase/GetAllWatchlistMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msDatabaseClient) DeleteMovieFromWatchlist(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/msproto.MsDatabase/DeleteMovieFromWatchlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msDatabaseClient) CreateReview(ctx context.Context, in *NewReview, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/msproto.MsDatabase/CreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msDatabaseClient) UpdateReview(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/msproto.MsDatabase/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsDatabaseServer is the server API for MsDatabase service.
// All implementations must embed UnimplementedMsDatabaseServer
// for forward compatibility
type MsDatabaseServer interface {
	CreateUser(context.Context, *NewUser) (*User, error)
	GetAllMovies(*EmptyMovie, MsDatabase_GetAllMoviesServer) error
	GetMovieByCategory(context.Context, *MovieCategory) (*Movies, error)
	AddMovie(context.Context, *NewMovie) (*Movie, error)
	DeleteMovie(context.Context, *Movie) (*Movie, error)
	AddMovieToWatchlist(context.Context, *AddMovieByUser) (*Movie, error)
	GetAllWatchlistMovies(context.Context, *EmptyMovie) (*Movies, error)
	DeleteMovieFromWatchlist(context.Context, *Movie) (*Movie, error)
	CreateReview(context.Context, *NewReview) (*Review, error)
	UpdateReview(context.Context, *Review) (*Review, error)
	mustEmbedUnimplementedMsDatabaseServer()
}

// UnimplementedMsDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedMsDatabaseServer struct {
}

func (UnimplementedMsDatabaseServer) CreateUser(context.Context, *NewUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMsDatabaseServer) GetAllMovies(*EmptyMovie, MsDatabase_GetAllMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllMovies not implemented")
}
func (UnimplementedMsDatabaseServer) GetMovieByCategory(context.Context, *MovieCategory) (*Movies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieByCategory not implemented")
}
func (UnimplementedMsDatabaseServer) AddMovie(context.Context, *NewMovie) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovie not implemented")
}
func (UnimplementedMsDatabaseServer) DeleteMovie(context.Context, *Movie) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMsDatabaseServer) AddMovieToWatchlist(context.Context, *AddMovieByUser) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovieToWatchlist not implemented")
}
func (UnimplementedMsDatabaseServer) GetAllWatchlistMovies(context.Context, *EmptyMovie) (*Movies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWatchlistMovies not implemented")
}
func (UnimplementedMsDatabaseServer) DeleteMovieFromWatchlist(context.Context, *Movie) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovieFromWatchlist not implemented")
}
func (UnimplementedMsDatabaseServer) CreateReview(context.Context, *NewReview) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedMsDatabaseServer) UpdateReview(context.Context, *Review) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedMsDatabaseServer) mustEmbedUnimplementedMsDatabaseServer() {}

// UnsafeMsDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsDatabaseServer will
// result in compilation errors.
type UnsafeMsDatabaseServer interface {
	mustEmbedUnimplementedMsDatabaseServer()
}

func RegisterMsDatabaseServer(s grpc.ServiceRegistrar, srv MsDatabaseServer) {
	s.RegisterService(&MsDatabase_ServiceDesc, srv)
}

func _MsDatabase_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsDatabaseServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MsDatabase/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsDatabaseServer).CreateUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsDatabase_GetAllMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMovie)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MsDatabaseServer).GetAllMovies(m, &msDatabaseGetAllMoviesServer{stream})
}

type MsDatabase_GetAllMoviesServer interface {
	Send(*Movie) error
	grpc.ServerStream
}

type msDatabaseGetAllMoviesServer struct {
	grpc.ServerStream
}

func (x *msDatabaseGetAllMoviesServer) Send(m *Movie) error {
	return x.ServerStream.SendMsg(m)
}

func _MsDatabase_GetMovieByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsDatabaseServer).GetMovieByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MsDatabase/GetMovieByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsDatabaseServer).GetMovieByCategory(ctx, req.(*MovieCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsDatabase_AddMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMovie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsDatabaseServer).AddMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MsDatabase/AddMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsDatabaseServer).AddMovie(ctx, req.(*NewMovie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsDatabase_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Movie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsDatabaseServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MsDatabase/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsDatabaseServer).DeleteMovie(ctx, req.(*Movie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsDatabase_AddMovieToWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsDatabaseServer).AddMovieToWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MsDatabase/AddMovieToWatchlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsDatabaseServer).AddMovieToWatchlist(ctx, req.(*AddMovieByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsDatabase_GetAllWatchlistMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMovie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsDatabaseServer).GetAllWatchlistMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MsDatabase/GetAllWatchlistMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsDatabaseServer).GetAllWatchlistMovies(ctx, req.(*EmptyMovie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsDatabase_DeleteMovieFromWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Movie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsDatabaseServer).DeleteMovieFromWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MsDatabase/DeleteMovieFromWatchlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsDatabaseServer).DeleteMovieFromWatchlist(ctx, req.(*Movie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsDatabase_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewReview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsDatabaseServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MsDatabase/CreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsDatabaseServer).CreateReview(ctx, req.(*NewReview))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsDatabase_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Review)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsDatabaseServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msproto.MsDatabase/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsDatabaseServer).UpdateReview(ctx, req.(*Review))
	}
	return interceptor(ctx, in, info, handler)
}

// MsDatabase_ServiceDesc is the grpc.ServiceDesc for MsDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msproto.MsDatabase",
	HandlerType: (*MsDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _MsDatabase_CreateUser_Handler,
		},
		{
			MethodName: "GetMovieByCategory",
			Handler:    _MsDatabase_GetMovieByCategory_Handler,
		},
		{
			MethodName: "AddMovie",
			Handler:    _MsDatabase_AddMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MsDatabase_DeleteMovie_Handler,
		},
		{
			MethodName: "AddMovieToWatchlist",
			Handler:    _MsDatabase_AddMovieToWatchlist_Handler,
		},
		{
			MethodName: "GetAllWatchlistMovies",
			Handler:    _MsDatabase_GetAllWatchlistMovies_Handler,
		},
		{
			MethodName: "DeleteMovieFromWatchlist",
			Handler:    _MsDatabase_DeleteMovieFromWatchlist_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _MsDatabase_CreateReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _MsDatabase_UpdateReview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllMovies",
			Handler:       _MsDatabase_GetAllMovies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "msproto/ms.proto",
}
